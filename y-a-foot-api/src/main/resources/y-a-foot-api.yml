openapi: 3.0.0
info:
  title: Y'a foot REST API
  description: REST controllers API
  version: 1.0.0
servers:
- url: http://localhost:8080/api
  description: Localhost deployment
paths:
  /users/{email}/auth:
    put:
      operationId: authenticateUser
      summary: Authenticate a user and return a valid token
      tags:
      - users
      parameters:
      - in: path
        name: email
        required: true
        schema:
          type: string
          format: email
        description: Email address identifying the user
      requestBody:
        name: user
        description: User to authenticate
        required: true
        content:
          application/json:
            schema:
              type: User
      responses:
        '202': # Accepted
          description: User authenticated
          content:
            application/json:
              schema:
                type: User
        '401': # Unauthorized
          description: Invalid credentials
  /players:
    get:
      operationId: loadPlayerByEmail
      summary: Loads details for a player
      parameters:
      - in: query
        name: email
        required: true
        schema:
          type: string
        description: Email address to identify a player
      tags:
      - players
      responses:
        '200': # OK
          content:
            application/json:
              schema:
                type: Player
        '404': # Not found
    post:
      operationId: createPlayer
      summary: Create a new player
      tags:
      - players
      requestBody:
        name: player
        description: Player to save
        required: true
        content:
          application/json:
            schema:
              type: Player
      responses:
        '201': # Created
          description: Player ID
          content:
            application/json:
              schema:
                type: long
  /players/{playerId}:
    parameters:
    - in: path
      name: playerId
      required: true
      schema:
        type: integer
      description: Player's numeric identifier
    put:
      operationId: updatePlayer
      tags:
      - players
      requestBody:
        name: player
        description: Player with updated information
        required: true
        content:
          application/json:
            schema:
              type: Player
      responses:
        '202': # Accepted
          description: Player updated
    delete:
      operationId: deactivatePlayer
      tags:
      - players
      responses:
        '204': # No content
          description: Player deactivated
  /matches:
    get:
      operationId: loadMatchesByPlayer
      summary: Loads matches for a player
      tags:
      - matches
      parameters:
      - in: header
        name: player
        required: true
        schema:
          type: string
      responses:
        '200': # OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Match'
    post:
      operationId: createMatch
      summary: Creates a match
      tags:
      - matches
      requestBody:
        name: match
        description: Match to create
        required: true
        content:
          application/json:
            schema:
              type: Match
      responses:
        '201': # Created
          description: Player ID
          content:
            application/json:
              schema:
                type: long
  /matches/{matchCode}:
    parameters:
    - in: path
      name: matchCode
      required: true
      schema:
        type: string
      description: Unique match code
    get:
      operationId: loadMatchByCode
      summary: Load a match by its unique code
      tags:
      - matches
      responses:
        '200': # OK
          content:
            application/json:
              schema:
                type: Match
  /matches/{matchCode}/players:
    parameters:
    - in: path
      name: matchCode
      required: true
      schema:
        type: string
      description: Unique match code
    post:
      operationId: registerPlayerToMatch
      summary: Registers an existing player to a match
      tags:
      - matches
      requestBody:
        name: playerRegistration
        description: Player registration including informations about the car proposed to assist to the match
        required: true
        content:
          application/json:
            schema:
              type: Registration
      responses:
        '201': # Created
          description: Registration saved
  /matches/{matchCode}/players/{playerId}:
    parameters:
    - in: path
      name: matchCode
      required: true
      schema:
        type: string
      description: Unique match code
    - in: path
      name: playerId
      required: true
      schema:
        type: integer
      description: Unique player ID
    delete:
      operationId: unregisterPlayerFromMatch
      tags:
      - matches
      responses:
        '204': # No content
          description: Player unregistered
  /sites:
    get:
      operationId: loadSitesByPlayer
      summary: Loads the sites visited or registrated by a player
      tags:
      - sites
      parameters:
      - in: header
        name: player
        required: true
        schema:
          type: string
          format: email
      responses:
        '200': # OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Site'
  /cars:
    get:
      operationId: loadCarsByPlayer
      summary: Loads the list of cars registered by a player
      tags:
      - cars
      parameters:
      - in: header
        name: player
        required: true
        schema:
          type: string
          format: email
      responses:
        '200': # OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Car'
    post:
      operationId: addNewCar
      summary: Registers a new car for a player
      tags:
      - cars
      requestBody:
        name: car
        description: Car to save for a player
        required: true
        content:
          application/json:
            schema:
              type: Car
      responses:
        '201': # Created
          description: Car saved
components:
  schemas:
    User:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: byte
        token:
          type: string
        firstName:
          type: string
        surname:
          type: string
    Player:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            id:
              type: integer
            phoneNumber:
              type: string
    Site:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
        name:
          type: string
        address:
          type: string
        phoneNumber:
          type: string
        location:
          type: GpsCoordinates
    Car:
      type: object
      required:
        - name
      properties:
        id:
          type: int
        name:
          type: string
        numSeats:
          type: integer
        driver:
          type: Player
        passengers:
          type: array
          items:
            $ref: '#/components/schemas/Player'
    Registration:
      type: object
      required:
        - player
        - car
      properties:
        matchId:
          type: integer
        playerId:
          type: integer
        player:
          type: Player
        car:
          type: Car
    Match:
      type: object
      properties:
        id:
          type: integer
        code:
          type: string
        date:
          type: string
          format: date-time
        description:
          type: string
        numPlayersMin:
          type: integer
        numPlayersMax:
          type: integer
        numRegisteredPlayers:
          type: integer
        site:
          type: Site
        author:
          type: Player
        registrations:
          type: array
          items:
            $ref: '#/components/schemas/Registration'
        carpoolingEnabled:
          type: boolean
        sharingEnabled:
          type: boolean
    GpsCoordinates:
      type: object
      required:
        - latitude
        - longitude
      properties:
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
    UserContext:
      type: object
      properties:
        player:
          type: Player
        timezone:
          type: string
        language:
          type: string
