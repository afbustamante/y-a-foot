openapi: 3.0.0
info:
  title: Y'a foot REST API
  description: REST controllers API
  version: "2.0.0"
servers:
- url: http://localhost:8080/api
  description: Localhost deployment
tags:
  - name: users
    description: Users management API. Allows to register and authenticate users
  - name: players
    description: Players management API. Allows to manage players' details
  - name: matches
    description: Matches management API. Allows to create and update the detail of matches organised by players
  - name: sites
    description: Sites management API. Allows to manage information about the sites for playing football between friends
  - name: cars
    description: Cars management API. Allows to add new cars from players organising new matches.
paths:
  /users/{email}/details:
    patch:
      operationId: updateUserCredentials
      summary: Updates the authentication credentials for a user
      tags:
      - users
      parameters:
      - in: path
        name: email
        required: true
        schema:
          type: string
          format: email
        description: Email address identifying the user
      requestBody:
        description: Credentials to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
      responses:
        202: # Accepted
          description: User credentials updated
        400: # Bad request
          description: Invalid password
        403: # Forbidden
          description: User not allowed to perform this operation
  /users/{email}/auth:
    put:
      operationId: authenticateUser
      summary: Authenticates a user and returns a valid token
      tags:
      - users
      parameters:
      - in: path
        name: email
        required: true
        schema:
          type: string
          format: email
        description: Email address identifying the user
      requestBody:
        description: User to authenticate
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        202: # Accepted
          description: User authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401: # Unauthorized
          description: Invalid credentials
  /players:
    get:
      operationId: loadPlayerByEmail
      summary: Loads details for a player
      parameters:
      - in: query
        name: email
        required: true
        schema:
          type: string
        description: Email address to identify a player
      tags:
      - players
      responses:
        200: # OK
          description: Player details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'
        404: # Not found
          description: No player found for the given ID
    post:
      operationId: createPlayer
      summary: Create a new player
      tags:
      - players
      requestBody:
        description: Player to save
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Player'
      responses:
        201: # Created
          description: Player successfully created. Player's ID is returned in Location header
  /players/{playerId}:
    parameters:
    - in: path
      name: playerId
      required: true
      schema:
        type: integer
      description: Player's numeric identifier
    put:
      operationId: updatePlayer
      tags:
      - players
      requestBody:
        description: Player with updated information
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Player'
      responses:
        202: # Accepted
          description: Player successfully updated
    delete:
      operationId: deactivatePlayer
      tags:
      - players
      responses:
        '204': # No content
          description: Player successfully deactivated
  /matches:
    get:
      operationId: loadMatches
      summary: Loads the matches available for the active player
      tags:
      - matches
      parameters:
      - in: query
        name: startDate
        required: false
        schema:
          type: string
          format: date
        description: Start date for the research
      - in: query
        name: endDate
        required: false
        schema:
          type: string
          format: date
        description: End date for the research
      responses:
        200: # OK
          description: List of matches found for the active player
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Match'
    post:
      operationId: createMatch
      summary: Creates a match
      tags:
      - matches
      requestBody:
        description: Match to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Match'
      responses:
        201: # Created
          description: Match successfully created. Match code returned in Location header
  /matches/{matchCode}:
    parameters:
    - in: path
      name: matchCode
      required: true
      schema:
        type: string
      description: Unique match code
    get:
      operationId: loadMatchByCode
      summary: Load a match by its unique code
      tags:
      - matches
      responses:
        200: # OK
          description: Match details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Match'
  /matches/{matchCode}/registrations:
    parameters:
    - in: path
      name: matchCode
      required: true
      schema:
        type: string
      description: Unique match code
    get:
      operationId: loadMatchRegistrations
      summary: Loads the registrations list for a match identified by its unique code
      tags:
      - matches
      responses:
        200: # OK
          description: Match registrations list and details
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Registration'
        404: # Not found
          description: Match not found
    post:
      operationId: registerPlayerToMatch
      summary: Registers an existing player to a match
      tags:
      - matches
      requestBody:
        description: Player registration including informations about the car proposed/chosen to assist to the match
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Registration'
      responses:
        201: # Created
          description: Registration saved
        404: # Not found
          description: Match not found
  /matches/{matchCode}/registrations/{playerId}:
    parameters:
    - in: path
      name: matchCode
      required: true
      schema:
        type: string
      description: Unique match code
    - in: path
      name: playerId
      required: true
      schema:
        type: integer
      description: Unique player ID
    delete:
      operationId: unregisterPlayerFromMatch
      tags:
      - matches
      responses:
        204: # No content
          description: Player unregistered from match
        400: # Bad request
          description: Player not registered in this match
        404: # Not found
          description: Match not found
        500: # Internal server error
          description: Database problem while loading data or unregistering the player from match
  /sites:
    get:
      operationId: loadSites
      summary: Loads the sites visited or registrated by the active player
      tags:
      - sites
      responses:
        200: # OK
          description: List of sites found for the active player
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Site'
    post:
      operationId: addNewSite
      summary: Registers a new site for a player
      tags:
      - sites
      requestBody:
        description: Site to save
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Site'
      responses:
        201: # Created
          description: Site successfully saved. Site's ID is returned in Location header
        400: # Bad request
          description: Missing user information
        500: #Â Internal server error
          description: A database error occurred while saving site's information
  /cars:
    get:
      operationId: loadCars
      summary: Loads the list of cars registered by the active player
      tags:
      - cars
      responses:
        200: # OK
          description: List of cars found for the active player
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Car'
    post:
      operationId: addNewCar
      summary: Registers a new car for a player
      tags:
      - cars
      requestBody:
        description: Car to save for a player
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Car'
      responses:
        201: # Created
          description: Car successfully saved. Car's ID is returned in Location header
components:
  schemas:
    User:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: byte
        token:
          type: string
        firstName:
          type: string
        surname:
          type: string
    Credentials:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          format: email
        password:
          type: string
          format: byte
        validationToken:
          type: string
        oldPassword:
          type: string
          format: byte
    Player:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            id:
              type: integer
            phoneNumber:
              type: string
    Site:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
        name:
          type: string
        address:
          type: string
        phoneNumber:
          type: string
        location:
          $ref: '#/components/schemas/GpsCoordinates'
    Car:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
        name:
          type: string
        numSeats:
          type: integer
        driver:
          $ref: '#/components/schemas/Player'
        passengers:
          type: array
          items:
            $ref: '#/components/schemas/Player'
    Registration:
      type: object
      required:
        - player
      properties:
        player:
          $ref: '#/components/schemas/Player'
        car:
          $ref: '#/components/schemas/Car'
    Match:
      type: object
      required:
      - date
      - site
      properties:
        id:
          type: integer
        code:
          type: string
        date:
          type: string
          format: date-time
        description:
          type: string
        numPlayersMin:
          type: integer
        numPlayersMax:
          type: integer
        numRegisteredPlayers:
          type: integer
        site:
          $ref: '#/components/schemas/Site'
        author:
          $ref: '#/components/schemas/Player'
        registrations:
          type: array
          items:
            $ref: '#/components/schemas/Registration'
        carpoolingEnabled:
          type: boolean
        sharingEnabled:
          type: boolean
    GpsCoordinates:
      type: object
      required:
        - latitude
        - longitude
      properties:
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
    UserContext:
      type: object
      properties:
        player:
          $ref: '#/components/schemas/Player'
        timezone:
          type: string
        language:
          type: string
